<h3>About this extension.</h3>
<p>This plug-in provides you with more relevant search results than are currently available to the normal Wordpress search and it should also do so with less of a performance hit on the db than the normal Wordpress search.  We use the MySQL commands MATCH () AGAINST () as opposed to Wordpress’ use of LIKE to do our queries which are not as heavy on the db. The only issue we have with “match against” is that we need an index on the columns we intend to search on. </p>
<h3>Creating an index.</h3>
<p>For these search methods to work you'll need a FULLTEXT index on your post_content and post_title in the wp_posts table. This can be done by using the "create index" button. There are some things to be aware of before you proceed. </p>
<p>Firstly adding the index will likely double the size of your wp_posts table, this in and of itself isn’t a problem however if you’re running up against the upper limits of your hosts allowed size then creating an index may push you over that limit. If you do hit your size limit nothing bad should happen but it would be best if you backed up your database first just in case. Always a good idea to run a backup before anything is done to change the db.</p>
<p>Second thing you should know is that the index creation is handled by a Wordpress cron job. Some hosts have problems with wp_cron and if your host is one of those then you will see this <b>“The index creation/deletion is scheduled to start after {date and time}”</b> below the button for a long time after the job was supposed to run. Don’t worry if it’s only a few mins as that is quite normal. If you do have a problem with wp_cron on your server you may find future dated posts don’t become live when you hoped. We can, if you have something like PHPMyAdmin, create the indexes manually by running these commands against your Wordpress db:</p>
<code><?php global $wpdb; echo 'CREATE FULLTEXT INDEX ' . SPEC_ADVSEARCH_KEY . " ON {$wpdb->posts} (post_content)";?></code>
<br/><code><?php echo 'CREATE FULLTEXT INDEX ' . SPEC_ADVSEARCH_KEY . "_title ON {$wpdb->posts} (post_title)";?></code>
<p>Thirdly creating the indexes could take quite some time depending upon your server set up. Once the index creation kicks in, unless your server creates the index so quickly that it completes the creation before the command to collect the status has run, you should see <b>“Creating index on post_-----. MySQL is returning the following message:”</b>  Don’t panic if you see something like <b>“repair by sorting”</b> or <b>“copy to tmp table”</b> as these are expected messages but if you get <b>“Repair with keycache”</b> still don’t panic just be prepared to wait a long while for the index to complete its creation.</p>
<h3>Setting up</h3>
<p>Once the index is live you should be able to tick the enable button. Now we get to choose from up to 5 different modes of search:
<ol>
<li>Default mode: This will find posts containing any of the terms, the more of the terms there are in a post the higher relevance score it receives and thus the higher in the results it will appear (presuming sorting by rank). If two or more terms are searched for but only one can be found then posts matching that one will be returned. Terms matched in titles count as one and a half as much as those in the content.</li>
<li>Boolean mode: Very much the same as default mode but you get several extra operators that can alter a query. Adding <b style="color:black;background-color:yellow;">+</b> or <b style="color:black;background-color:yellow;">–</b> to the head of a term will either make it so that you return posts that must have the term or must not have the term.  <b style="color:black;background-color:yellow;">&gt;</b> or <b style="color:black;background-color:yellow;">&lt;</b> will increase or decrease the importance of a word. So for example (phone >droid) would find all phone post and droid post but droid posts would be considered more important. A full explanation of the operators can be found <a href="http://dev.mysql.com/doc/refman/5.1/en/fulltext-boolean.html">here</a>.</li>
<li>With query expansion: This kind of search can find posts related to your search terms but don’t necessarily contain any of the terms entered. So search for “android” for example and it will use posts that contain the word android to find words that are related to it. So it may deem that you want posts about robots too or it may also figure you want post relating to Google’s phone OS it really depends upon your sites content. For this mode you’ll need to tweak the relevance limit bases on what has been returned for your content otherwise it can end up returning all posts on your site. Not too big a problem if ordered by relevance but if ordered by date your results will make no sense at all.</li>
<li>In natural language mode: If you have MySQL 5.1 or better you will have two more modes available to you. First is In natural language mode which is mostly the same as default mode and in natural language more with query expansion which is functionally the same as the with query expansion.</li>
</ol></p>
<p>If your server works with wp_cron then you can set up a periodic table optimise that will help keep your table index in order. If your site changes rarely then you can set it to run infrequently or not at all and just use the “optimise table” button to do it as and when you want/need to. The more accurate your index is the better your search results will be and the lower the load on the db. All good basically. The optimise will kick in after the time it is set to run but wp-cron requires a visitor to kick off the job. So if you set it to start at 3:00am and you don’t get any activity on your site until 10am the next day the job won’t start until 10am. This shouldn’t be a problem as most optimisations apply very little load and take only a few second to run. </p>
<h3>Some hints</h3>
<p>
	<ol>
	<li>If all your search terms are under 3 characters long the normal WP search is run.</li>
	<li>If you sort by date, use query expansion and don't set a cut off relevancy then the results just list all your post chronologically.</li>
	<li>Search terms in post titles will cause a post to rank higher but if another posts has significantly more of the terms in its content you will see that post higher in the listing.</li>
	<li>Each time a post is added to your site you may find the relevancy score changes for certain terms when using 'with query expansion'. You may need to keep an eye on this to help keep the returned results relevant.</li>
	<li>Sites with a small number of posts may find it better to not use query expansion.</li>
	</ol>
</p>
